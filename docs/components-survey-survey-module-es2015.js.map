{"version":3,"sources":["./src/app/components/survey/form/form.component.ts","./src/app/components/survey/form/form.component.html","./src/app/components/survey/interstitial/interstitial.component.ts","./src/app/components/survey/interstitial/interstitial.component.html","./src/app/components/survey/logic/logic.component.ts","./src/app/components/survey/logic/logic.component.html","./src/app/components/survey/multiple-choice/multiple-choice.component.ts","./src/app/components/survey/multiple-choice/multiple-choice.component.html","./src/app/components/survey/question/question.component.ts","./src/app/components/survey/question/question.component.html","./src/app/components/survey/quiz/quiz.component.ts","./src/app/components/survey/quiz/quiz.component.html","./src/app/components/survey/router.animations.ts","./src/app/components/survey/state/survey.query.ts","./src/app/components/survey/state/survey.service.ts","./src/app/components/survey/state/survey.store.ts","./src/app/components/survey/survey-routing.module.ts","./src/app/components/survey/survey.component.ts","./src/app/components/survey/survey.component.html","./src/app/components/survey/survey.module.ts"],"names":[],"mappings":"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","file":"components-survey-survey-module-es2015.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n  @Input() info: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>form</p>\n<h1>{{info.question}}</h1>\n<div *ngFor=\"let f of info.nodeTemplateForm\">\n    <input class=\"bg-white border border-gray-300 rounded-lg py-2 px-4 appearance-none leading-normal\" *ngIf=\"f.type === 'Input'\" type=\"text\" [placeholder]=\"f.placeholder\" />\n</div>\n<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{{info.submit.text}}</button>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { SurveyStore } from '../state/survey.store';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-interstitial',\n  templateUrl: './interstitial.component.html',\n  styleUrls: ['./interstitial.component.scss']\n})\nexport class InterstitialComponent implements OnInit {\n  @Input()\n  info: any;\n  @Output() next: EventEmitter<any> = new EventEmitter();\n  forwardToId: string;\n\n  constructor(\n    private router: Router,\n    private surveyStore: SurveyStore,\n    ) { }\n\n  ngOnInit(): void {\n    let that = this;\n    this.forwardToId = '';\n\n    this.forwardToId = this.info.forwardToNode;\n\n    this.surveyStore.updateActiveQ(this.forwardToId );\n\n    setTimeout(function(){\n\n      // console.log(this.pastIds);\n      if(that.router.url === \"/survey/quiz1\"){\n        that.router.navigate(['survey/quiz2']);\n      }else{\n        that.router.navigate(['survey/quiz1']);\n      }\n    }, 2000);\n  }\n\n}\n","<p>interstitial</p>\n<h1>{{info.text}}</h1>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SurveyStore } from '../state/survey.store';\n\n@Component({\n  selector: 'app-logic',\n  templateUrl: './logic.component.html',\n  styleUrls: ['./logic.component.scss']\n})\nexport class LogicComponent implements OnInit {\n  @Input()\n  info: any;\n  @Output() next: EventEmitter<any> = new EventEmitter();\n  forwardToId: string;\n\n  constructor(\n    private router: Router,\n    private surveyStore: SurveyStore,\n    ) { }\n\n  ngOnInit(): void {\n    let that = this;\n    this.forwardToId = '';\n\n    this.forwardToId = this.info.forwardToNodeDefault;\n\n    this.surveyStore.updateActiveQ(this.forwardToId );\n\n    setTimeout(function(){\n\n      // console.log(this.pastIds);\n      if(that.router.url === \"/survey/quiz1\"){\n        that.router.navigate(['survey/quiz2']);\n      }else{\n        that.router.navigate(['survey/quiz1']);\n      }\n    }, 0);\n  }\n}\n","<p>logic</p>\n<h1>{{info.rules[0].attribute}}</h1>\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-multiple-choice',\n  templateUrl: './multiple-choice.component.html',\n  styleUrls: ['./multiple-choice.component.scss']\n})\nexport class MultipleChoiceComponent implements OnInit {\n  @Input() info: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>multiple-choice</p>\n<h1>{{info.question}}</h1>\n<div *ngFor=\"let a of info.answers\">\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{{a.text}}</button>\n</div>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.scss']\n})\nexport class QuestionComponent implements OnInit {\n  @Input() info: any;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>question</p>\n<h1>{{info.question}}</h1>\n<div *ngFor=\"let a of info.answers\">\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{{a.text}}</button>\n</div>","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { SurveyService } from '../state/survey.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { SurveyQuery } from '../state/survey.query';\nimport { arrayFind, filterNil } from '@datorama/akita';\nimport { Survey, Node } from '../state/survey.model';\nimport { tap, map, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit,OnDestroy {\n  private subscriptions = new Subscription();\n  // loading$ = this.surveyQuery.selectLoading();\n  // node = this.surveyQuery.selectFirst();\n  // survey$: any;\n  // surveys = this.surveyQuery.selectAll();\n  active: Observable<Survey>;\n  activeQ$: any;\n  activeQ: string;\n\n  node: Observable<Node>;\n  nodes$: Observable<Node[]>;\n  nodes: Node[];\n  selectLoading$: Observable<boolean>;\n  loaded = false;\n  constructor(\n    // private router: ActivatedRoute,\n    private surveyService: SurveyService, private surveyQuery: SurveyQuery\n  ) { }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  ngOnInit(): void {\n      // this.nodes$ = this.surveyQuery.selectAll();\n      this.selectLoading$ = this.surveyQuery.selectLoading();\n      this.subscriptions.add(\n        this.selectLoading$.subscribe(res => {this.goTime(res)})\n      )\n    }\n   \n    goTime(res){\n      if(!res){\n        const activeId = this.surveyQuery.getActive();\n        this.nodes$ = this.surveyQuery.selectEntity(activeId.id, 'nodes');\n        this.subscriptions.add(\n          this.nodes$.subscribe(res => {this.nodes = res;})\n        )\n        this.activeQ$ = this.surveyQuery.selectActiveQ$;\n        this.subscriptions.add(\n          this.activeQ$.pipe(filterNil).subscribe(res => {\n            this.activeQ = res;\n            console.log(this.activeQ);\n\n          })\n        )\n\n        this.node = this.surveyQuery.selectEntity(activeId.id, 'nodes').pipe(arrayFind(this.activeQ));\n        console.log(this.activeQ);\n        this.loaded = true;\n\n      }\n    }\n\n}\n","<section>\n    <h1>quiz</h1>\n    <article *ngIf=\"node | async as nodeObj\">\n        <app-form *ngIf=\"loaded && nodeObj.nodeType === 'Form'\" [info]='nodeObj'></app-form>\n        <app-logic *ngIf=\"loaded && nodeObj.nodeType === 'Logic'\" [info]='nodeObj'></app-logic>\n        <app-question *ngIf=\"loaded && nodeObj.nodeType === 'Question'\" [info]='nodeObj' ></app-question>\n        <app-interstitial *ngIf=\"loaded && nodeObj.nodeType === 'Interstitial'\" [info]='nodeObj'></app-interstitial>\n        <app-multiple-choice *ngIf=\"loaded && nodeObj.nodeType === 'MultipleChoice'\" [info]='nodeObj'></app-multiple-choice>\n    </article>\n</section>","import {trigger, animate, style, group, query, transition} from '@angular/animations';\n\nexport const routerTransition = trigger('routerTransition', [\n  transition('* <=> *', [\n    /* 1 */\n    query(':enter, :leave', style({ position: 'fixed', width:'100%' }), { optional: true }),\n    /* 2 */\n    group([ // block executes in parallel\n      query(':enter', [\n        style({ transform: 'translateX(100%)' }),\n        animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n      ], { optional: true }),\n      query(':leave', [\n        style({ transform: 'translateX(0%)' }),\n        animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\n      ], { optional: true }),\n    ])\n  ])\n])","import { Injectable } from '@angular/core';\nimport { QueryEntity, EntityUIQuery } from '@datorama/akita';\nimport { SurveyStore, SurveyState } from './survey.store';\nimport { Survey } from './survey.model';\n\n@Injectable({ providedIn: 'root' })\nexport class SurveyQuery extends QueryEntity<SurveyState, Survey> {\n  // ui: EntityUIQuery<SuerveyUIState>;\n  selectActiveQ$ = this.select(state => state.ui.activeQ);\n  constructor(protected store: SurveyStore) {\n    super(store);\n    // this.createUIQuery();\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ID } from '@datorama/akita';\nimport { tap } from 'rxjs/operators';\nimport { Survey } from './survey.model';\nimport { SurveyStore } from './survey.store';\n\n@Injectable({ providedIn: 'root' })\nexport class SurveyService {\n\n  constructor(private surveyStore: SurveyStore, private http: HttpClient) {\n  }\n\n  get() {\n    return this.http.get<Survey[]>('http://localhost:3000/surveys').pipe(\n      tap(entities => this.surveyStore.set(entities))\n    );\n  }\n\n  // get2() {\n  //   return this.http.get<Survey[]>('http://localhost:3000/surveys').pipe(\n  //     tap(entities => {this.surveyStore.set(entities);})\n  //   );\n  // }\n  getSurveys() {\n    return this.http.get<Survey[]>('http://localhost:3000/surveys').subscribe(entities => {\n      this.surveyStore.set(entities, {activeId: entities[0].id});\n    });\n  }\n  \n  async getAll() {\n    const res = await this.http.get<Survey[]>('http://localhost:3000/surveys').toPromise();\n    this.surveyStore.set(res);\n  }\n\n  \n  // async getData() {\n  //   try {\n  //     await this.http.get('http://localhost:3000/surveys').toPromise();\n  //   } catch (error) {\n  //     this.surveyStore.setError(error);\n  //   }\n  // }\n  // add(survey: Survey) {\n  //   this.surveyStore.add(survey);\n  // }\n  // update(id, survey: Partial<Survey>) {\n  //   this.surveyStore.update(id, survey);\n  // }\n  // remove(id: ID) {\n  //   this.surveyStore.remove(id);\n  // }\n\n}\n","import { Injectable } from '@angular/core';\nimport { EntityState, EntityStore, StoreConfig, ActiveState, EntityUIStore } from '@datorama/akita';\nimport { Survey } from './survey.model';\n\n// export type SuerveyUI = {\n//   isOpen: boolean;\n//   isLoading: boolean;\n//   activeNodeId: string;\n// }\n\nexport interface SurveyState extends EntityState<Survey>, ActiveState {\n  ui: {\n    activeQ: string;\n  };\n}\n// export interface SuerveyUIState extends EntityState<SuerveyUI> {}\nconst initialState = {\n  ui: { activeQ: '' }\n};\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'survey' })\nexport class SurveyStore extends EntityStore<SurveyState> {\n  // ui: EntityUIStore<SuerveyUIState>;\n  constructor() {\n    super(initialState);\n  }\n\n  updateActiveQ(nid: string) {\n    this.update({ ui: { activeQ:nid } } )\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QuizComponent } from './quiz/quiz.component';\nimport { SurveyComponent } from './survey.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: SurveyComponent, data: { state: 'survey' },\n    children: [\n      { path: 'quiz1', component: QuizComponent },\n      { path: 'quiz2', component: QuizComponent },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SurveyRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { routerTransition } from './router.animations';\nimport { SurveyService } from './state/survey.service';\nimport { SurveyQuery } from './state/survey.query';\nimport { Observable, of, EMPTY, Subscription } from 'rxjs';\nimport { Survey, Node } from './state/survey.model';\nimport { SurveyStore } from './state/survey.store';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { filterNil, arrayFind, arrayUpdate } from '@datorama/akita';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-survey',\n  templateUrl: './survey.component.html',\n  styleUrls: ['./survey.component.scss'],\n  animations: [routerTransition]\n})\nexport class SurveyComponent implements OnInit {\n  private subscriptions = new Subscription();\n  activeSurveyId: string;\n\n  getState() {\n    return (this.router.url === \"/survey/quiz1\") ? 'quiz1' : 'quiz2';\n  }\n\n  // surveys:any;\n  // loading$ = this.surveyQuery.selectLoading();\n  // name: string;\n  node: Node;\n  nodes$: Observable<Node[]>;\n  nodes: Node[];\n  forwardToId:string;\n  loaded = false;\n  pastIds = [];\n  firstSurvey: Observable<Survey>;\n  selectLoading$: Observable<boolean>;\n\n  // surveys = this.surveyQuery.selectFirst().subscribe(obj => obj);\n  constructor(\n    private router: Router,\n    // private route:ActivatedRoute,\n    private surveyService: SurveyService,\n    private surveyStore: SurveyStore,\n    private surveyQuery: SurveyQuery\n  ) {\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  ngOnInit(): void {\n\n    this.surveyService.getSurveys();\n\n    this.selectLoading$ = this.surveyQuery.selectLoading();\n    this.selectLoading$.subscribe(res => {\n      if(!res){\n        this.firstSurvey = this.surveyQuery.selectFirst();//.pipe(switchMap(value => value !== undefined ? of(value) : EMPTY))\n        this.firstSurvey.subscribe(obj => {\n          this.activeSurveyId = obj.id;\n          this.surveyStore.setActive(obj.id);\n          this.nodes$ = this.surveyQuery.selectEntity(obj.id, 'nodes');\n          this.nodes$.subscribe(res => {\n            this.nodes = res;\n          });\n          // this.nodes = this.surveyQuery.selectEntity(obj.id, ({ nodes }) => nodes);\n          this.nodes$.pipe(arrayFind(obj.nodeRootId)).subscribe(obj =>{\n            this.node = obj;\n          })\n          this.surveyStore.updateActiveQ(obj.nodeRootId);\n\n        })\n\n        this.loaded = true;\n      }\n    })\n    // this.nodes = this.surveyQuery.selectFirst();\n  }\n\n\n  \n  nodeNext(ev): void {\n\n    this.forwardToId = '';\n\n    if(this.node.nodeType === \"Form\"){\n      this.forwardToId = this.node.submit.forwardToNode;\n      this.pastIds.push(this.node.id);\n\n    }\n    if(this.node.nodeType === \"Interstitial\"){\n      this.forwardToId = this.node.forwardToNode;\n    }\n    if(this.node.nodeType === \"Question\"){\n      this.forwardToId = this.node.answers[0].forwardToNode;\n      this.pastIds.push(this.node.id);\n\n    }\n    if(this.node.nodeType === \"MultipleChoice\"){\n      this.forwardToId = this.node.submit.forwardToNode;\n      this.pastIds.push(this.node.id);\n\n    }\n    if(this.node.nodeType === \"Logic\"){\n      this.forwardToId = this.node.forwardToNodeDefault;\n    }\n\n    let nextNode = this.nodes.find(node => {\n      return node.id === this.forwardToId;\n    })\n\n    if(nextNode && nextNode.nodeType){\n      // this.surveyStore.update(this.activeSurveyId, ({ nodes }) => ({\n      //   nodes: arrayUpdate(nodes, this.forwardToId, { active: true })\n      // }));\n      this.surveyStore.updateActiveQ(this.forwardToId );\n      this.node = nextNode;\n      // console.log(this.pastIds);\n      if(this.router.url === \"/survey/quiz1\"){\n        this.router.navigate(['survey/quiz2']);\n      }else{\n        this.router.navigate(['survey/quiz1']);\n      }\n\n    }else{\n      console.log(nextNode);\n    }\n\n  }\n  \n  nodePrev(): void {\n\n    const pastId = this.pastIds[this.pastIds.length-1];\n    this.surveyStore.updateActiveQ(pastId );\n    if(this.router.url === \"/survey/quiz1\"){\n      this.router.navigate(['survey/quiz2']);\n    }else{\n      this.router.navigate(['survey/quiz1']);\n    }\n    let prevNode = this.nodes.find(node => {\n      return node.id === pastId;\n    })\n\n    if(prevNode && prevNode.nodeType){\n      this.node = prevNode;\n      this.pastIds.pop();\n    }else{\n      console.log(prevNode);\n    }\n\n  }\n}\n\n\n// selectDeviceTelemetry$: Subscription = new Subscription();\n\n// this.selectDeviceTelemetry$.add(\n//   this.deviceTelemetryQuery.selectEntity(commonName).pipe(\n//     filterNil, // Ignore empty initial observable emitted\n//     untilDestroyed(this) // Auto destroys during ngOnDestroy\n//    ).subscribe()\n// )\n\n// this.selectDeviceTelemetry$.unsubscribe();","<h1>survey</h1>\n<!-- <p>{{(firstSurvey | async)?.id}}</p> -->\n<!-- <p *ngFor=\"let item of surveys | async\">{{ item.name }}</p> -->\n<main [@routerTransition]=\"getState()\">\n  <router-outlet></router-outlet>\n</main>\n<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" (click)=\"nodePrev()\">back</button>\n<!-- &nbsp;\n<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" (click)=\"nodeNext(null)\"\n    *ngIf=\"loaded && node.nodeType !== 'Interstitial' && node.nodeType !== 'Logic'\">next</button> -->\n    &nbsp;\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" (click)=\"nodeNext(null)\"\n        *ngIf=\"loaded\">next</button>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SurveyComponent } from './survey.component';\nimport { FormComponent } from './form/form.component';\nimport { LogicComponent } from './logic/logic.component';\nimport { MultipleChoiceComponent } from './multiple-choice/multiple-choice.component';\nimport { QuestionComponent } from './question/question.component';\nimport { InterstitialComponent } from './interstitial/interstitial.component';\nimport { QuizComponent } from './quiz/quiz.component';\nimport { SurveyRoutingModule } from './survey-routing.module';\n\n@NgModule({\n  declarations: [\n    SurveyComponent,\n    QuizComponent,\n    FormComponent,\n    LogicComponent,\n    MultipleChoiceComponent,\n    QuestionComponent,\n    InterstitialComponent,\n  ],\n  imports: [\n    CommonModule,\n    SurveyRoutingModule\n  ]\n})\nexport class SurveyModule { }\n"],"sourceRoot":"webpack:///"}