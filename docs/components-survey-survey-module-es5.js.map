{"version":3,"sources":["webpack:///src/app/components/survey/form/form.component.ts","webpack:///src/app/components/survey/form/form.component.html","webpack:///src/app/components/survey/interstitial/interstitial.component.ts","webpack:///src/app/components/survey/interstitial/interstitial.component.html","webpack:///src/app/components/survey/logic/logic.component.ts","webpack:///src/app/components/survey/logic/logic.component.html","webpack:///src/app/components/survey/multiple-choice/multiple-choice.component.ts","webpack:///src/app/components/survey/multiple-choice/multiple-choice.component.html","webpack:///src/app/components/survey/question/question.component.ts","webpack:///src/app/components/survey/question/question.component.html","webpack:///src/app/components/survey/quiz/quiz.component.ts","webpack:///src/app/components/survey/quiz/quiz.component.html","webpack:///src/app/components/survey/router.animations.ts","webpack:///src/app/components/survey/state/survey.query.ts","webpack:///src/app/components/survey/state/survey.service.ts","webpack:///src/app/components/survey/state/survey.store.ts","webpack:///src/app/components/survey/survey-routing.module.ts","webpack:///src/app/components/survey/survey.component.ts","webpack:///src/app/components/survey/survey.component.html","webpack:///src/app/components/survey/survey.module.ts"],"names":["FormComponent","selector","templateUrl","styleUrls","InterstitialComponent","router","surveyStore","next","that","forwardToId","info","forwardToNode","updateActiveQ","setTimeout","url","navigate","LogicComponent","forwardToNodeDefault","MultipleChoiceComponent","QuestionComponent","QuizComponent","surveyService","surveyQuery","subscriptions","loaded","unsubscribe","selectLoading$","selectLoading","add","subscribe","res","goTime","activeId","getActive","nodes$","selectEntity","id","nodes","activeQ$","selectActiveQ$","pipe","activeQ","console","log","node","routerTransition","position","width","optional","transform","SurveyQuery","store","select","state","ui","providedIn","SurveyService","http","get","entities","set","toPromise","initialState","SurveyStore","nid","update","name","routes","path","component","data","children","SurveyRoutingModule","forChild","imports","exports","SurveyComponent","pastIds","getSurveys","firstSurvey","selectFirst","obj","activeSurveyId","setActive","nodeRootId","ev","nodeType","submit","push","answers","nextNode","find","pastId","length","prevNode","pop","nodePrev","animations","SurveyModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGI;;;;;;AAA0I;;;;;;AAD9I;;AACI;;AACJ;;;;;;AADuG;;AAAA;;;;QDI1FA,a;AAGX,+BAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBANUA,a;AAAa,K;;;YAAbA,a;AAAa,+B;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,wa;AAAA;AAAA;ACP1B;;AAAG;;AAAI;;AACP;;AAAI;;AAAiB;;AACrB;;AAGA;;AAAqF;;AAAoB;;;;AAJrG;;AAAA;;AACC;;AAAA;;AAGgF;;AAAA;;;;;;;;;sEDExEA,a,EAAa;cALzB,uDAKyB;eALf;AACTC,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKe,Q;;;;gBACvB;;;;;;;;;;;;;;;;;;;;AERH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaC,qB;AAMX,qCACUC,MADV,EAEUC,WAFV,EAEkC;AAAA;;AADxB,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AALA,aAAAC,IAAA,GAA0B,IAAI,0DAAJ,EAA1B;AAMH;;;;mCAEC;AACN,cAAIC,IAAI,GAAG,IAAX;AACA,eAAKC,WAAL,GAAmB,EAAnB;AAEA,eAAKA,WAAL,GAAmB,KAAKC,IAAL,CAAUC,aAA7B;AAEA,eAAKL,WAAL,CAAiBM,aAAjB,CAA+B,KAAKH,WAApC;AAEAI,oBAAU,CAAC;AAET;AACA,gBAAGL,IAAI,CAACH,MAAL,CAAYS,GAAZ,KAAoB,eAAvB,EAAuC;AACrCN,kBAAI,CAACH,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD,aAFD,MAEK;AACHP,kBAAI,CAACH,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD;AACF,WARS,EAQP,IARO,CAAV;AASD;;;;;;;uBA5BUX,qB,EAAqB,uH,EAAA,gI;AAAA,K;;;YAArBA,qB;AAAqB,uC;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA;AAAA;ACTlC;;AAAG;;AAAY;;AACf;;AAAI;;AAAa;;;;AAAb;;AAAA;;;;;;;;sEDQSA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTH,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;gBAC/B;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaa,c;AAMX,8BACUX,MADV,EAEUC,WAFV,EAEkC;AAAA;;AADxB,aAAAD,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AALA,aAAAC,IAAA,GAA0B,IAAI,0DAAJ,EAA1B;AAMH;;;;mCAEC;AACN,cAAIC,IAAI,GAAG,IAAX;AACA,eAAKC,WAAL,GAAmB,EAAnB;AAEA,eAAKA,WAAL,GAAmB,KAAKC,IAAL,CAAUO,oBAA7B;AAEA,eAAKX,WAAL,CAAiBM,aAAjB,CAA+B,KAAKH,WAApC;AAEAI,oBAAU,CAAC;AAET;AACA,gBAAGL,IAAI,CAACH,MAAL,CAAYS,GAAZ,KAAoB,eAAvB,EAAuC;AACrCN,kBAAI,CAACH,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD,aAFD,MAEK;AACHP,kBAAI,CAACH,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD;AACF,WARS,EAQP,CARO,CAAV;AASD;;;;;;;uBA5BUC,c,EAAc,uH,EAAA,gI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA;AAAA;ACT3B;;AAAG;;AAAK;;AACR;;AAAI;;AAA2B;;;;AAA3B;;AAAA;;;;;;;;sEDQSA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTf,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;gBACxB;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEA;;AACI;;AAAqF;;AAAU;;AACnG;;;;;;AADyF;;AAAA;;;;QDI5Ee,uB;AAGX,yCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBANUA,uB;AAAuB,K;;;YAAvBA,uB;AAAuB,0C;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,sI;AAAA;AAAA;ACPpC;;AAAG;;AAAe;;AAClB;;AAAI;;AAAiB;;AACrB;;;;AADI;;AAAA;;AACC;;AAAA;;;;;;;;;sEDKQA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACTjB,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,kCAAD;AAHF,S;AAKyB,Q;;;;gBACjC;;;;;;;;;;;;;;;;;;;;AERH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEA;;AACI;;AAAqF;;AAAU;;AACnG;;;;;;AADyF;;AAAA;;;;QDI5EgB,iB;AAEX,mCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,mC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,sI;AAAA;AAAA;ACP9B;;AAAG;;AAAQ;;AACX;;AAAI;;AAAiB;;AACrB;;;;AADI;;AAAA;;AACC;;AAAA;;;;;;;;;sEDKQA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTlB,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;gBAC3B;;;;;;;;;;;;;;;;;;;;AERH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGQ;;;;;;AAAwD;;;;;;AACxD;;;;;;AAA0D;;;;;;AAC1D;;;;;;AAAgE;;;;;;AAChE;;;;;;AAAwE;;;;;;AACxE;;;;;;AAA6E;;;;;;AALjF;;AACI;;AACA;;AACA;;AACA;;AACA;;AACJ;;;;;;;;AALc;;AAAA;;AACC;;AAAA;;AACG;;AAAA;;AACI;;AAAA;;AACG;;AAAA;;;;QDMhBiB,a;AAeX,8BACE;AACQC,mBAFV,EAEgDC,WAFhD,EAEwE;AAAA;;AAA9D,aAAAD,aAAA,GAAAA,aAAA;AAAsC,aAAAC,WAAA,GAAAA,WAAA;AAhBxC,aAAAC,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AAaR,aAAAC,MAAA,GAAS,KAAT;AAIK;;;;sCACS;AACZ,eAAKD,aAAL,CAAmBE,WAAnB;AACD;;;mCACO;AAAA;;AACJ;AACA,eAAKC,cAAL,GAAsB,KAAKJ,WAAL,CAAiBK,aAAjB,EAAtB;AACA,eAAKJ,aAAL,CAAmBK,GAAnB,CACE,KAAKF,cAAL,CAAoBG,SAApB,CAA8B,UAAAC,GAAG,EAAI;AAAC,iBAAI,CAACC,MAAL,CAAYD,GAAZ;AAAiB,WAAvD,CADF;AAGD;;;+BAEMA,G,EAAG;AAAA;;AACR,cAAG,CAACA,GAAJ,EAAQ;AACN,gBAAME,QAAQ,GAAG,KAAKV,WAAL,CAAiBW,SAAjB,EAAjB;AACA,iBAAKC,MAAL,GAAc,KAAKZ,WAAL,CAAiBa,YAAjB,CAA8BH,QAAQ,CAACI,EAAvC,EAA2C,OAA3C,CAAd;AACA,iBAAKb,aAAL,CAAmBK,GAAnB,CACE,KAAKM,MAAL,CAAYL,SAAZ,CAAsB,UAAAC,GAAG,EAAI;AAAC,oBAAI,CAACO,KAAL,GAAaP,GAAb;AAAkB,aAAhD,CADF;AAGA,iBAAKQ,QAAL,GAAgB,KAAKhB,WAAL,CAAiBiB,cAAjC;AACA,iBAAKhB,aAAL,CAAmBK,GAAnB,CACE,KAAKU,QAAL,CAAcE,IAAd,CAAmB,yDAAnB,EAA8BX,SAA9B,CAAwC,UAAAC,GAAG,EAAI;AAC7C,oBAAI,CAACW,OAAL,GAAeX,GAAf;AACAY,qBAAO,CAACC,GAAR,CAAY,MAAI,CAACF,OAAjB;AAED,aAJD,CADF;AAQA,iBAAKG,IAAL,GAAY,KAAKtB,WAAL,CAAiBa,YAAjB,CAA8BH,QAAQ,CAACI,EAAvC,EAA2C,OAA3C,EAAoDI,IAApD,CAAyD,kEAAU,KAAKC,OAAf,CAAzD,CAAZ;AACAC,mBAAO,CAACC,GAAR,CAAY,KAAKF,OAAjB;AACA,iBAAKjB,MAAL,GAAc,IAAd;AAED;AACF;;;;;;;uBAnDQJ,a,EAAa,oI,EAAA,gI;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,gE;AAAA;AAAA;ACb1B;;AACI;;AAAI;;AAAI;;AACR;;;;AAOJ;;;;AAPa;;AAAA;;;;;;;;;;sEDWAA,a,EAAa;cALzB,uDAKyB;eALf;AACTnB,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;AEb1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEO,QAAM0C,gBAAgB,GAAG,oEAAQ,kBAAR,EAA4B,CAC1D,uEAAW,SAAX,EAAsB;AACpB;AACA,sEAAM,gBAAN,EAAwB,kEAAM;AAAEC,cAAQ,EAAE,OAAZ;AAAqBC,WAAK,EAAC;AAA3B,KAAN,CAAxB,EAAoE;AAAEC,cAAQ,EAAE;AAAZ,KAApE,CAFoB;AAGpB;AACA,sEAAM,CACJ,kEAAM,QAAN,EAAgB,CACd,kEAAM;AAAEC,eAAS,EAAE;AAAb,KAAN,CADc,EAEd,oEAAQ,kBAAR,EAA4B,kEAAM;AAAEA,eAAS,EAAE;AAAb,KAAN,CAA5B,CAFc,CAAhB,EAGG;AAAED,cAAQ,EAAE;AAAZ,KAHH,CADI,EAKJ,kEAAM,QAAN,EAAgB,CACd,kEAAM;AAAEC,eAAS,EAAE;AAAb,KAAN,CADc,EAEd,oEAAQ,kBAAR,EAA4B,kEAAM;AAAEA,eAAS,EAAE;AAAb,KAAN,CAA5B,CAFc,CAAhB,EAGG;AAAED,cAAQ,EAAE;AAAZ,KAHH,CALI,CAAN,CAJoB,CAAtB,CAD0D,CAA5B,CAAzB;;;;;;;;;;;;;;;;ACFP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaE,W;;;;;AAGX,2BAAsBC,KAAtB,EAA0C;AAAA;;AAAA;;AACxC,mCAAMA,KAAN;AADoB,eAAAA,KAAA,GAAAA,KAAA,CAAoB,CAF1C;;AACA,eAAAZ,cAAA,GAAiB,OAAKa,MAAL,CAAY,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACC,EAAN,CAASb,OAAb;AAAA,SAAjB,CAAjB,CAC0C,CAExC;;AAFwC;AAGzC;;;MAN8B,2D;;;uBAApBS,W,EAAW,iH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBADE;;;;;sEACbA,W,EAAW;cADvB,wDACuB;eADZ;AAAEK,oBAAU,EAAE;AAAd,S;AACY,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCEXC,a;AAEX,6BAAoBlD,WAApB,EAAsDmD,IAAtD,EAAwE;AAAA;;AAApD,aAAAnD,WAAA,GAAAA,WAAA;AAAkC,aAAAmD,IAAA,GAAAA,IAAA;AACrD;;;;8BAEK;AAAA;;AACJ,iBAAO,KAAKA,IAAL,CAAUC,GAAV,CAAwB,+BAAxB,EAAyDlB,IAAzD,CACL,2DAAI,UAAAmB,QAAQ;AAAA,mBAAI,MAAI,CAACrD,WAAL,CAAiBsD,GAAjB,CAAqBD,QAArB,CAAJ;AAAA,WAAZ,CADK,CAAP;AAGD,S,CAED;AACA;AACA;AACA;AACA;;;;qCACa;AAAA;;AACX,iBAAO,KAAKF,IAAL,CAAUC,GAAV,CAAwB,+BAAxB,EAAyD7B,SAAzD,CAAmE,UAAA8B,QAAQ,EAAI;AACpF,kBAAI,CAACrD,WAAL,CAAiBsD,GAAjB,CAAqBD,QAArB,EAA+B;AAAC3B,sBAAQ,EAAE2B,QAAQ,CAAC,CAAD,CAAR,CAAYvB;AAAvB,aAA/B;AACD,WAFM,CAAP;AAGD;;;iCAEc;;;;;;;;AACD,2BAAM,KAAKqB,IAAL,CAAUC,GAAV,CAAwB,+BAAxB,EAAyDG,SAAzD,EAAN;;;AAAN/B,uB;AACN,yBAAKxB,WAAL,CAAiBsD,GAAjB,CAAqB9B,GAArB;;;;;;;;;AACD;;;;;;;uBAzBU0B,a,EAAa,iH,EAAA,uH;AAAA,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBADA;;;;;sEACbA,a,EAAa;cADzB,wDACyB;eADd;AAAED,oBAAU,EAAE;AAAd,S;AACc,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+ECO1B;;;AACA,QAAMO,YAAY,GAAG;AACnBR,QAAE,EAAE;AAAEb,eAAO,EAAE;AAAX;AADe,KAArB;;QAMasB,WAAW;AAAA;;AAAA;;AACtB;AACA,6BAAc;AAAA;;AAAA,kCACND,YADM;AAEb;;AAJqB;AAAA;AAAA,sCAMRE,GANQ,EAMK;AACzB,eAAKC,MAAL,CAAY;AAAEX,cAAE,EAAE;AAAEb,qBAAO,EAACuB;AAAV;AAAN,WAAZ;AACD;AARqB;;AAAA;AAAA,MAAS,2DAAT,C;;;uBAAXD,W;AAAW,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFE;;AAEbA,eAAW,6DADvB,oEAAY;AAAEG,UAAI,EAAE;AAAR,KAAZ,CACuB,GAAXH,WAAW,CAAX;;;;sEAAAA,W,EAAW;cAFvB,wDAEuB;eAFZ;AAAER,oBAAU,EAAE;AAAd,S;AAEY,Q;;;;;;;;;;;;;;;;;;;;ACtBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMY,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AACYC,eAAS,EAAE,iEADvB;AACwCC,UAAI,EAAE;AAAEjB,aAAK,EAAE;AAAT,OAD9C;AAEEkB,cAAQ,EAAE,CACR;AAAEH,YAAI,EAAE,OAAR;AAAiBC,iBAAS,EAAE;AAA5B,OADQ,EAER;AAAED,YAAI,EAAE,OAAR;AAAiBC,iBAAS,EAAE;AAA5B,OAFQ;AAFZ,KADqB,CAAvB;;QAcaG,mB;;;;;YAAAA;;;;yBAAAA,mB;AAAmB,O;AAAA,gBAHrB,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CAGqB,EAFpB,4DAEoB;;;;0HAAnBK,mB,EAAmB;AAAA;AAAA,kBAFpB,4DAEoB;AAAA,O;AAFR,K;;;;;sEAEXA,mB,EAAmB;cAJ/B,sDAI+B;eAJtB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBN,MAAtB,CAAD,CADD;AAERQ,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIsB,Q;;;;;;;;;;;;;;;;;;ACpBhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACWI;;AAAqF;AAAA;;AAAA;;AAAA,iCAAkB,IAAlB;AAAsB,SAAtB;;AAClE;;AAAI;;;;QDKdC,e;AAoBX;AACA,+BACUvE,MADV,EAEE;AACQgB,mBAHV,EAIUf,WAJV,EAKUgB,WALV,EAKkC;AAAA;;AAJxB,aAAAjB,MAAA,GAAAA,MAAA;AAEA,aAAAgB,aAAA,GAAAA,aAAA;AACA,aAAAf,WAAA,GAAAA,WAAA;AACA,aAAAgB,WAAA,GAAAA,WAAA;AAzBF,aAAAC,aAAA,GAAgB,IAAI,iDAAJ,EAAhB;AAcR,aAAAC,MAAA,GAAS,KAAT;AACA,aAAAqD,OAAA,GAAU,EAAV;AAYC;;;;mCAxBU;AACT,iBAAQ,KAAKxE,MAAL,CAAYS,GAAZ,KAAoB,eAArB,GAAwC,OAAxC,GAAkD,OAAzD;AACD;;;sCAuBa;AACZ,eAAKS,aAAL,CAAmBE,WAAnB;AACD;;;mCACO;AAAA;;AAEN,eAAKJ,aAAL,CAAmByD,UAAnB;AAEA,eAAKpD,cAAL,GAAsB,KAAKJ,WAAL,CAAiBK,aAAjB,EAAtB;AACA,eAAKD,cAAL,CAAoBG,SAApB,CAA8B,UAAAC,GAAG,EAAI;AACnC,gBAAG,CAACA,GAAJ,EAAQ;AACN,oBAAI,CAACiD,WAAL,GAAmB,MAAI,CAACzD,WAAL,CAAiB0D,WAAjB,EAAnB,CADM,CAC4C;;AAClD,oBAAI,CAACD,WAAL,CAAiBlD,SAAjB,CAA2B,UAAAoD,GAAG,EAAI;AAChC,sBAAI,CAACC,cAAL,GAAsBD,GAAG,CAAC7C,EAA1B;;AACA,sBAAI,CAAC9B,WAAL,CAAiB6E,SAAjB,CAA2BF,GAAG,CAAC7C,EAA/B;;AACA,sBAAI,CAACF,MAAL,GAAc,MAAI,CAACZ,WAAL,CAAiBa,YAAjB,CAA8B8C,GAAG,CAAC7C,EAAlC,EAAsC,OAAtC,CAAd;;AACA,sBAAI,CAACF,MAAL,CAAYL,SAAZ,CAAsB,UAAAC,GAAG,EAAI;AAC3B,wBAAI,CAACO,KAAL,GAAaP,GAAb;AACD,iBAFD,EAJgC,CAOhC;;;AACA,sBAAI,CAACI,MAAL,CAAYM,IAAZ,CAAiB,kEAAUyC,GAAG,CAACG,UAAd,CAAjB,EAA4CvD,SAA5C,CAAsD,UAAAoD,GAAG,EAAG;AAC1D,wBAAI,CAACrC,IAAL,GAAYqC,GAAZ;AACD,iBAFD;;AAGA,sBAAI,CAAC3E,WAAL,CAAiBM,aAAjB,CAA+BqE,GAAG,CAACG,UAAnC;AAED,eAbD;;AAeA,oBAAI,CAAC5D,MAAL,GAAc,IAAd;AACD;AACF,WApBD,EALM,CA0BN;AACD;;;iCAIQ6D,E,EAAE;AAAA;;AAET,eAAK5E,WAAL,GAAmB,EAAnB;;AAEA,cAAG,KAAKmC,IAAL,CAAU0C,QAAV,KAAuB,MAA1B,EAAiC;AAC/B,iBAAK7E,WAAL,GAAmB,KAAKmC,IAAL,CAAU2C,MAAV,CAAiB5E,aAApC;AACA,iBAAKkE,OAAL,CAAaW,IAAb,CAAkB,KAAK5C,IAAL,CAAUR,EAA5B;AAED;;AACD,cAAG,KAAKQ,IAAL,CAAU0C,QAAV,KAAuB,cAA1B,EAAyC;AACvC,iBAAK7E,WAAL,GAAmB,KAAKmC,IAAL,CAAUjC,aAA7B;AACD;;AACD,cAAG,KAAKiC,IAAL,CAAU0C,QAAV,KAAuB,UAA1B,EAAqC;AACnC,iBAAK7E,WAAL,GAAmB,KAAKmC,IAAL,CAAU6C,OAAV,CAAkB,CAAlB,EAAqB9E,aAAxC;AACA,iBAAKkE,OAAL,CAAaW,IAAb,CAAkB,KAAK5C,IAAL,CAAUR,EAA5B;AAED;;AACD,cAAG,KAAKQ,IAAL,CAAU0C,QAAV,KAAuB,gBAA1B,EAA2C;AACzC,iBAAK7E,WAAL,GAAmB,KAAKmC,IAAL,CAAU2C,MAAV,CAAiB5E,aAApC;AACA,iBAAKkE,OAAL,CAAaW,IAAb,CAAkB,KAAK5C,IAAL,CAAUR,EAA5B;AAED;;AACD,cAAG,KAAKQ,IAAL,CAAU0C,QAAV,KAAuB,OAA1B,EAAkC;AAChC,iBAAK7E,WAAL,GAAmB,KAAKmC,IAAL,CAAU3B,oBAA7B;AACD;;AAED,cAAIyE,QAAQ,GAAG,KAAKrD,KAAL,CAAWsD,IAAX,CAAgB,UAAA/C,IAAI,EAAI;AACrC,mBAAOA,IAAI,CAACR,EAAL,KAAY,MAAI,CAAC3B,WAAxB;AACD,WAFc,CAAf;;AAIA,cAAGiF,QAAQ,IAAIA,QAAQ,CAACJ,QAAxB,EAAiC;AAC/B;AACA;AACA;AACA,iBAAKhF,WAAL,CAAiBM,aAAjB,CAA+B,KAAKH,WAApC;AACA,iBAAKmC,IAAL,GAAY8C,QAAZ,CAL+B,CAM/B;;AACA,gBAAG,KAAKrF,MAAL,CAAYS,GAAZ,KAAoB,eAAvB,EAAuC;AACrC,mBAAKT,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD,aAFD,MAEK;AACH,mBAAKV,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD;AAEF,WAbD,MAaK;AACH2B,mBAAO,CAACC,GAAR,CAAY+C,QAAZ;AACD;AAEF;;;mCAEO;AAEN,cAAME,MAAM,GAAG,KAAKf,OAAL,CAAa,KAAKA,OAAL,CAAagB,MAAb,GAAoB,CAAjC,CAAf;AACA,eAAKvF,WAAL,CAAiBM,aAAjB,CAA+BgF,MAA/B;;AACA,cAAG,KAAKvF,MAAL,CAAYS,GAAZ,KAAoB,eAAvB,EAAuC;AACrC,iBAAKT,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD,WAFD,MAEK;AACH,iBAAKV,MAAL,CAAYU,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACD;;AACD,cAAI+E,QAAQ,GAAG,KAAKzD,KAAL,CAAWsD,IAAX,CAAgB,UAAA/C,IAAI,EAAI;AACrC,mBAAOA,IAAI,CAACR,EAAL,KAAYwD,MAAnB;AACD,WAFc,CAAf;;AAIA,cAAGE,QAAQ,IAAIA,QAAQ,CAACR,QAAxB,EAAiC;AAC/B,iBAAK1C,IAAL,GAAYkD,QAAZ;AACA,iBAAKjB,OAAL,CAAakB,GAAb;AACD,WAHD,MAGK;AACHrD,mBAAO,CAACC,GAAR,CAAYmD,QAAZ;AACD;AAEF;;;;;;;uBApIUlB,e,EAAe,uH,EAAA,oI,EAAA,gI,EAAA,gI;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,mO;AAAA;AAAA;ACjB5B;;AAAI;;AAAM;;AAGV;;AACE;;AACF;;AACA;;AAAqF;AAAA,mBAAS,IAAAoB,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAI;;AAI1G;;AACA;;;;AARE;;AAAA;;AASE;;AAAA;;;;;;mBDGM,CAAC,mEAAD;;;;;;sEAEDpB,e,EAAe;cAN3B,uDAM2B;eANjB;AACT3E,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD,CAHF;AAIT8F,oBAAU,EAAE,CAAC,mEAAD;AAJH,S;AAMiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjB5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA0BaC,Y;;;;;YAAAA;;;;yBAAAA,Y;AAAY,O;AAAA,gBALd,CACP,4DADO,EAEP,0EAFO,CAKc;;;;0HAAZA,Y,EAAY;AAAA,uBAbrB,iEAaqB,EAZrB,kEAYqB,EAXrB,kEAWqB,EAVrB,qEAUqB,EATrB,kGASqB,EARrB,8EAQqB,EAPrB,0FAOqB;AAPA,kBAGrB,4DAHqB,EAIrB,0EAJqB;AAOA,O;AAHF,K;;;;;sEAGVA,Y,EAAY;cAfxB,sDAewB;eAff;AACRC,sBAAY,EAAE,CACZ,iEADY,EAEZ,kEAFY,EAGZ,kEAHY,EAIZ,qEAJY,EAKZ,kGALY,EAMZ,8EANY,EAOZ,0FAPY,CADN;AAURzB,iBAAO,EAAE,CACP,4DADO,EAEP,0EAFO;AAVD,S;AAee,Q","file":"components-survey-survey-module-es5.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n  @Input() info: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>form</p>\n<h1>{{info.question}}</h1>\n<div *ngFor=\"let f of info.nodeTemplateForm\">\n    <input class=\"bg-white border border-gray-300 rounded-lg py-2 px-4 appearance-none leading-normal\" *ngIf=\"f.type === 'Input'\" type=\"text\" [placeholder]=\"f.placeholder\" />\n</div>\n<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{{info.submit.text}}</button>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { SurveyStore } from '../state/survey.store';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-interstitial',\n  templateUrl: './interstitial.component.html',\n  styleUrls: ['./interstitial.component.scss']\n})\nexport class InterstitialComponent implements OnInit {\n  @Input()\n  info: any;\n  @Output() next: EventEmitter<any> = new EventEmitter();\n  forwardToId: string;\n\n  constructor(\n    private router: Router,\n    private surveyStore: SurveyStore,\n    ) { }\n\n  ngOnInit(): void {\n    let that = this;\n    this.forwardToId = '';\n\n    this.forwardToId = this.info.forwardToNode;\n\n    this.surveyStore.updateActiveQ(this.forwardToId );\n\n    setTimeout(function(){\n\n      // console.log(this.pastIds);\n      if(that.router.url === \"/survey/quiz1\"){\n        that.router.navigate(['survey/quiz2']);\n      }else{\n        that.router.navigate(['survey/quiz1']);\n      }\n    }, 2000);\n  }\n\n}\n","<p>interstitial</p>\n<h1>{{info.text}}</h1>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SurveyStore } from '../state/survey.store';\n\n@Component({\n  selector: 'app-logic',\n  templateUrl: './logic.component.html',\n  styleUrls: ['./logic.component.scss']\n})\nexport class LogicComponent implements OnInit {\n  @Input()\n  info: any;\n  @Output() next: EventEmitter<any> = new EventEmitter();\n  forwardToId: string;\n\n  constructor(\n    private router: Router,\n    private surveyStore: SurveyStore,\n    ) { }\n\n  ngOnInit(): void {\n    let that = this;\n    this.forwardToId = '';\n\n    this.forwardToId = this.info.forwardToNodeDefault;\n\n    this.surveyStore.updateActiveQ(this.forwardToId );\n\n    setTimeout(function(){\n\n      // console.log(this.pastIds);\n      if(that.router.url === \"/survey/quiz1\"){\n        that.router.navigate(['survey/quiz2']);\n      }else{\n        that.router.navigate(['survey/quiz1']);\n      }\n    }, 0);\n  }\n}\n","<p>logic</p>\n<h1>{{info.rules[0].attribute}}</h1>\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-multiple-choice',\n  templateUrl: './multiple-choice.component.html',\n  styleUrls: ['./multiple-choice.component.scss']\n})\nexport class MultipleChoiceComponent implements OnInit {\n  @Input() info: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>multiple-choice</p>\n<h1>{{info.question}}</h1>\n<div *ngFor=\"let a of info.answers\">\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{{a.text}}</button>\n</div>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.scss']\n})\nexport class QuestionComponent implements OnInit {\n  @Input() info: any;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>question</p>\n<h1>{{info.question}}</h1>\n<div *ngFor=\"let a of info.answers\">\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">{{a.text}}</button>\n</div>","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { SurveyService } from '../state/survey.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { SurveyQuery } from '../state/survey.query';\nimport { arrayFind, filterNil } from '@datorama/akita';\nimport { Survey, Node } from '../state/survey.model';\nimport { tap, map, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-quiz',\n  templateUrl: './quiz.component.html',\n  styleUrls: ['./quiz.component.scss'],\n})\nexport class QuizComponent implements OnInit,OnDestroy {\n  private subscriptions = new Subscription();\n  // loading$ = this.surveyQuery.selectLoading();\n  // node = this.surveyQuery.selectFirst();\n  // survey$: any;\n  // surveys = this.surveyQuery.selectAll();\n  active: Observable<Survey>;\n  activeQ$: any;\n  activeQ: string;\n\n  node: Observable<Node>;\n  nodes$: Observable<Node[]>;\n  nodes: Node[];\n  selectLoading$: Observable<boolean>;\n  loaded = false;\n  constructor(\n    // private router: ActivatedRoute,\n    private surveyService: SurveyService, private surveyQuery: SurveyQuery\n  ) { }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  ngOnInit(): void {\n      // this.nodes$ = this.surveyQuery.selectAll();\n      this.selectLoading$ = this.surveyQuery.selectLoading();\n      this.subscriptions.add(\n        this.selectLoading$.subscribe(res => {this.goTime(res)})\n      )\n    }\n   \n    goTime(res){\n      if(!res){\n        const activeId = this.surveyQuery.getActive();\n        this.nodes$ = this.surveyQuery.selectEntity(activeId.id, 'nodes');\n        this.subscriptions.add(\n          this.nodes$.subscribe(res => {this.nodes = res;})\n        )\n        this.activeQ$ = this.surveyQuery.selectActiveQ$;\n        this.subscriptions.add(\n          this.activeQ$.pipe(filterNil).subscribe(res => {\n            this.activeQ = res;\n            console.log(this.activeQ);\n\n          })\n        )\n\n        this.node = this.surveyQuery.selectEntity(activeId.id, 'nodes').pipe(arrayFind(this.activeQ));\n        console.log(this.activeQ);\n        this.loaded = true;\n\n      }\n    }\n\n}\n","<section>\n    <h1>quiz</h1>\n    <article *ngIf=\"node | async as nodeObj\">\n        <app-form *ngIf=\"loaded && nodeObj.nodeType === 'Form'\" [info]='nodeObj'></app-form>\n        <app-logic *ngIf=\"loaded && nodeObj.nodeType === 'Logic'\" [info]='nodeObj'></app-logic>\n        <app-question *ngIf=\"loaded && nodeObj.nodeType === 'Question'\" [info]='nodeObj' ></app-question>\n        <app-interstitial *ngIf=\"loaded && nodeObj.nodeType === 'Interstitial'\" [info]='nodeObj'></app-interstitial>\n        <app-multiple-choice *ngIf=\"loaded && nodeObj.nodeType === 'MultipleChoice'\" [info]='nodeObj'></app-multiple-choice>\n    </article>\n</section>","import {trigger, animate, style, group, query, transition} from '@angular/animations';\n\nexport const routerTransition = trigger('routerTransition', [\n  transition('* <=> *', [\n    /* 1 */\n    query(':enter, :leave', style({ position: 'fixed', width:'100%' }), { optional: true }),\n    /* 2 */\n    group([ // block executes in parallel\n      query(':enter', [\n        style({ transform: 'translateX(100%)' }),\n        animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\n      ], { optional: true }),\n      query(':leave', [\n        style({ transform: 'translateX(0%)' }),\n        animate('0.5s ease-in-out', style({ transform: 'translateX(-100%)' }))\n      ], { optional: true }),\n    ])\n  ])\n])","import { Injectable } from '@angular/core';\nimport { QueryEntity, EntityUIQuery } from '@datorama/akita';\nimport { SurveyStore, SurveyState } from './survey.store';\nimport { Survey } from './survey.model';\n\n@Injectable({ providedIn: 'root' })\nexport class SurveyQuery extends QueryEntity<SurveyState, Survey> {\n  // ui: EntityUIQuery<SuerveyUIState>;\n  selectActiveQ$ = this.select(state => state.ui.activeQ);\n  constructor(protected store: SurveyStore) {\n    super(store);\n    // this.createUIQuery();\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ID } from '@datorama/akita';\nimport { tap } from 'rxjs/operators';\nimport { Survey } from './survey.model';\nimport { SurveyStore } from './survey.store';\n\n@Injectable({ providedIn: 'root' })\nexport class SurveyService {\n\n  constructor(private surveyStore: SurveyStore, private http: HttpClient) {\n  }\n\n  get() {\n    return this.http.get<Survey[]>('http://localhost:3000/surveys').pipe(\n      tap(entities => this.surveyStore.set(entities))\n    );\n  }\n\n  // get2() {\n  //   return this.http.get<Survey[]>('http://localhost:3000/surveys').pipe(\n  //     tap(entities => {this.surveyStore.set(entities);})\n  //   );\n  // }\n  getSurveys() {\n    return this.http.get<Survey[]>('http://localhost:3000/surveys').subscribe(entities => {\n      this.surveyStore.set(entities, {activeId: entities[0].id});\n    });\n  }\n  \n  async getAll() {\n    const res = await this.http.get<Survey[]>('http://localhost:3000/surveys').toPromise();\n    this.surveyStore.set(res);\n  }\n\n  \n  // async getData() {\n  //   try {\n  //     await this.http.get('http://localhost:3000/surveys').toPromise();\n  //   } catch (error) {\n  //     this.surveyStore.setError(error);\n  //   }\n  // }\n  // add(survey: Survey) {\n  //   this.surveyStore.add(survey);\n  // }\n  // update(id, survey: Partial<Survey>) {\n  //   this.surveyStore.update(id, survey);\n  // }\n  // remove(id: ID) {\n  //   this.surveyStore.remove(id);\n  // }\n\n}\n","import { Injectable } from '@angular/core';\nimport { EntityState, EntityStore, StoreConfig, ActiveState, EntityUIStore } from '@datorama/akita';\nimport { Survey } from './survey.model';\n\n// export type SuerveyUI = {\n//   isOpen: boolean;\n//   isLoading: boolean;\n//   activeNodeId: string;\n// }\n\nexport interface SurveyState extends EntityState<Survey>, ActiveState {\n  ui: {\n    activeQ: string;\n  };\n}\n// export interface SuerveyUIState extends EntityState<SuerveyUI> {}\nconst initialState = {\n  ui: { activeQ: '' }\n};\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'survey' })\nexport class SurveyStore extends EntityStore<SurveyState> {\n  // ui: EntityUIStore<SuerveyUIState>;\n  constructor() {\n    super(initialState);\n  }\n\n  updateActiveQ(nid: string) {\n    this.update({ ui: { activeQ:nid } } )\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QuizComponent } from './quiz/quiz.component';\nimport { SurveyComponent } from './survey.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: SurveyComponent, data: { state: 'survey' },\n    children: [\n      { path: 'quiz1', component: QuizComponent },\n      { path: 'quiz2', component: QuizComponent },\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SurveyRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { routerTransition } from './router.animations';\nimport { SurveyService } from './state/survey.service';\nimport { SurveyQuery } from './state/survey.query';\nimport { Observable, of, EMPTY, Subscription } from 'rxjs';\nimport { Survey, Node } from './state/survey.model';\nimport { SurveyStore } from './state/survey.store';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { filterNil, arrayFind, arrayUpdate } from '@datorama/akita';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-survey',\n  templateUrl: './survey.component.html',\n  styleUrls: ['./survey.component.scss'],\n  animations: [routerTransition]\n})\nexport class SurveyComponent implements OnInit {\n  private subscriptions = new Subscription();\n  activeSurveyId: string;\n\n  getState() {\n    return (this.router.url === \"/survey/quiz1\") ? 'quiz1' : 'quiz2';\n  }\n\n  // surveys:any;\n  // loading$ = this.surveyQuery.selectLoading();\n  // name: string;\n  node: Node;\n  nodes$: Observable<Node[]>;\n  nodes: Node[];\n  forwardToId:string;\n  loaded = false;\n  pastIds = [];\n  firstSurvey: Observable<Survey>;\n  selectLoading$: Observable<boolean>;\n\n  // surveys = this.surveyQuery.selectFirst().subscribe(obj => obj);\n  constructor(\n    private router: Router,\n    // private route:ActivatedRoute,\n    private surveyService: SurveyService,\n    private surveyStore: SurveyStore,\n    private surveyQuery: SurveyQuery\n  ) {\n  }\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n  ngOnInit(): void {\n\n    this.surveyService.getSurveys();\n\n    this.selectLoading$ = this.surveyQuery.selectLoading();\n    this.selectLoading$.subscribe(res => {\n      if(!res){\n        this.firstSurvey = this.surveyQuery.selectFirst();//.pipe(switchMap(value => value !== undefined ? of(value) : EMPTY))\n        this.firstSurvey.subscribe(obj => {\n          this.activeSurveyId = obj.id;\n          this.surveyStore.setActive(obj.id);\n          this.nodes$ = this.surveyQuery.selectEntity(obj.id, 'nodes');\n          this.nodes$.subscribe(res => {\n            this.nodes = res;\n          });\n          // this.nodes = this.surveyQuery.selectEntity(obj.id, ({ nodes }) => nodes);\n          this.nodes$.pipe(arrayFind(obj.nodeRootId)).subscribe(obj =>{\n            this.node = obj;\n          })\n          this.surveyStore.updateActiveQ(obj.nodeRootId);\n\n        })\n\n        this.loaded = true;\n      }\n    })\n    // this.nodes = this.surveyQuery.selectFirst();\n  }\n\n\n  \n  nodeNext(ev): void {\n\n    this.forwardToId = '';\n\n    if(this.node.nodeType === \"Form\"){\n      this.forwardToId = this.node.submit.forwardToNode;\n      this.pastIds.push(this.node.id);\n\n    }\n    if(this.node.nodeType === \"Interstitial\"){\n      this.forwardToId = this.node.forwardToNode;\n    }\n    if(this.node.nodeType === \"Question\"){\n      this.forwardToId = this.node.answers[0].forwardToNode;\n      this.pastIds.push(this.node.id);\n\n    }\n    if(this.node.nodeType === \"MultipleChoice\"){\n      this.forwardToId = this.node.submit.forwardToNode;\n      this.pastIds.push(this.node.id);\n\n    }\n    if(this.node.nodeType === \"Logic\"){\n      this.forwardToId = this.node.forwardToNodeDefault;\n    }\n\n    let nextNode = this.nodes.find(node => {\n      return node.id === this.forwardToId;\n    })\n\n    if(nextNode && nextNode.nodeType){\n      // this.surveyStore.update(this.activeSurveyId, ({ nodes }) => ({\n      //   nodes: arrayUpdate(nodes, this.forwardToId, { active: true })\n      // }));\n      this.surveyStore.updateActiveQ(this.forwardToId );\n      this.node = nextNode;\n      // console.log(this.pastIds);\n      if(this.router.url === \"/survey/quiz1\"){\n        this.router.navigate(['survey/quiz2']);\n      }else{\n        this.router.navigate(['survey/quiz1']);\n      }\n\n    }else{\n      console.log(nextNode);\n    }\n\n  }\n  \n  nodePrev(): void {\n\n    const pastId = this.pastIds[this.pastIds.length-1];\n    this.surveyStore.updateActiveQ(pastId );\n    if(this.router.url === \"/survey/quiz1\"){\n      this.router.navigate(['survey/quiz2']);\n    }else{\n      this.router.navigate(['survey/quiz1']);\n    }\n    let prevNode = this.nodes.find(node => {\n      return node.id === pastId;\n    })\n\n    if(prevNode && prevNode.nodeType){\n      this.node = prevNode;\n      this.pastIds.pop();\n    }else{\n      console.log(prevNode);\n    }\n\n  }\n}\n\n\n// selectDeviceTelemetry$: Subscription = new Subscription();\n\n// this.selectDeviceTelemetry$.add(\n//   this.deviceTelemetryQuery.selectEntity(commonName).pipe(\n//     filterNil, // Ignore empty initial observable emitted\n//     untilDestroyed(this) // Auto destroys during ngOnDestroy\n//    ).subscribe()\n// )\n\n// this.selectDeviceTelemetry$.unsubscribe();","<h1>survey</h1>\n<!-- <p>{{(firstSurvey | async)?.id}}</p> -->\n<!-- <p *ngFor=\"let item of surveys | async\">{{ item.name }}</p> -->\n<main [@routerTransition]=\"getState()\">\n  <router-outlet></router-outlet>\n</main>\n<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" (click)=\"nodePrev()\">back</button>\n<!-- &nbsp;\n<button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" (click)=\"nodeNext(null)\"\n    *ngIf=\"loaded && node.nodeType !== 'Interstitial' && node.nodeType !== 'Logic'\">next</button> -->\n    &nbsp;\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" (click)=\"nodeNext(null)\"\n        *ngIf=\"loaded\">next</button>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SurveyComponent } from './survey.component';\nimport { FormComponent } from './form/form.component';\nimport { LogicComponent } from './logic/logic.component';\nimport { MultipleChoiceComponent } from './multiple-choice/multiple-choice.component';\nimport { QuestionComponent } from './question/question.component';\nimport { InterstitialComponent } from './interstitial/interstitial.component';\nimport { QuizComponent } from './quiz/quiz.component';\nimport { SurveyRoutingModule } from './survey-routing.module';\n\n@NgModule({\n  declarations: [\n    SurveyComponent,\n    QuizComponent,\n    FormComponent,\n    LogicComponent,\n    MultipleChoiceComponent,\n    QuestionComponent,\n    InterstitialComponent,\n  ],\n  imports: [\n    CommonModule,\n    SurveyRoutingModule\n  ]\n})\nexport class SurveyModule { }\n"]}